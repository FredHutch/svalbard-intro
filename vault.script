# We use this for formatting output:

alias prettyjson='python -m json.tool'

# All we need for the "core" role is an IP on the right network and the role ID

curl -X POST \
  -d '{"role_id": "78b1f875-37b7-ed5b-aebc-ad5180f44264"}'\
  ${VAULT_ADDR}/v1/auth/approle/login |prettyjson

# Returns `client_token` which we use for downstream authentication
export VAULT_TOKEN=efce83fc-8275-bab9-d794-8ca3ca14c7df

# Tokens have properties, including TTL
 2020  curl -X GET -H "X-Vault-Token:$VAULT_TOKEN" ${VAULT_ADDR}/v1/auth/token/lookup-self |prettyjson 

# Lets go get secrets!
curl -X GET -H "X-Vault-Token:$VAULT_TOKEN" \
  ${VAULT_ADDR}/v1/secret/core |prettyjson
curl -X GET -H "X-Vault-Token:$VAULT_TOKEN" \
  ${VAULT_ADDR}/v1/secret/core/dallas |prettyjson
curl -X GET -H "X-Vault-Token:$VAULT_TOKEN" \
  ${VAULT_ADDR}/v1/secret/core/elvis |prettyjson

# this fails because the token has role "core" tied to policy "core" which has
# only read access to these paths

 curl -X POST -d '{"hoovers dress size":"10"}' -H "X-Vault-Token:$VAULT_TOKEN" ${VAULT_ADDR}/v1/secret/core

# This is the bit where we login using credentials from an approle with write
# access to our secrets in core

curl -X POST \
  -d '{"role_id": "0c711651-4f20-4b32-9192-0b73ec9ebb7a", \
       "secret_id":"54ea365e-3289-d64a-9dfb-89bb45d64c46"}' \
  ${VAULT_ADDR}/v1/auth/approle/login

# Fails because we were using an old token- go get a new one via the admin
# token on the vault.  NB, we may use other authentication to enable updates

# this is the new token for the `core-admin` role
export VAULT_TOKEN="415f4c81-8d75-d26b-6434-f297b1c5a9ea"

# This will now succeed
curl -X POST -d '{"hoovers dress size":"10"}' -H "X-Vault-Token:$VAULT_TOKEN" ${VAULT_ADDR}/v1/secret/core
curl -X GET -H "X-Vault-Token:$VAULT_TOKEN" ${VAULT_ADDR}/v1/secret/core |prettyjson 
